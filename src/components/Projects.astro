---
// Icons
import GitHub from "../icons/GitHub.astro";
import Link from "../icons/Link.astro";
import Twitter from "../icons/Twitter.astro";
import Video from "../icons/Video.astro";

// Components
import LinkButton from "./LinkButton.astro";
import VideoModal from "./VideoModal.astro";

// Data
import { projects, type Project, type Link as ProjectLink } from "../data/projectsData";

// Interfaces
interface Skill {
  name: string;
  class: string;
  icon: any;
}

const ICONS: { [key: string]: any } = {
  GitHub,
  Link,
  Twitter,
  Video,
};
---

<div
  class="section-child flex flex-col mt-6 gap-y-16 lg:gap-y-10 py-5 px-3 container-highlight"
>
  {
    projects.map((project: Project) => (
      <article
        class="flex flex-col self-center group space-x-0 space-y-4
      w-5/6 lg:w-full lg:flex-row lg:space-x-8 lg:space-y-0"
      >
        {/* Image Container */}
        <div
          class="w-full lg:w-1/2 flex items-center
            transition duration-500 ease-in-out shadow-xl overflow-clip 
            group-hover:-translate-y-1 group-hover:shadow-2xl
            border rounded-xl
          border-gray-400 dark:border-gray-800
          group-hover:border-gray-500 group-hover:dark:border-gray-700"
        >
          <img
            alt={`Imagen del Proyecto ${project.title}`}
            class="object-cover object-top w-full transition duration-500 
             h-full md:scale-110 lg:group-hover:scale-105"
            src={project.image}
            loading="lazy"
          />
        </div>

        {/* Title, description and links */}
        <div class="flex flex-col justify-between w-full text-center sm:text-left lg:w-1/2 py-0">
          <div>
            <h3 class="text-2xl font-bold text-gray-800 dark:text-gray-100">
              {project.title}
            </h3>

            <ul
              class="flex xs:flex-row flex-col sm:justify-start justify-center sm:items-start  flex-wrap gap-2 mt-2 mb-4"
            >
              {project.tags.map((tag: Skill) => (
                <li>
                  <span
                    class={`select-none flex justify-center items-center gap-x-1 py-1 px-3
                        xxs:text-sm text-xs font-bold dark:font-semibold xs:mx-0 mx-9
                        border rounded-full border-transparent dark:border-white/10 
                      dark:bg-black/10 
                        ${tag.class}`}
                  >
                    <tag.icon class="sm:size-4 size-3" />
                    {tag.name}
                  </span>
                </li>
              ))}
            </ul>
            <p class="mt-2 text-gray-700 dark:text-gray-300 text-pretty">
              {project.description}
            </p>
          </div>

          <footer
            class="flex flex-wrap justify-center sm:justify-start mt-3 md:mt-6 gap-2 sm:w-auto w-full"
          >
            {project.links.map((link: ProjectLink) => {
              const Icon = ICONS[link.icon];
              const isVideo = link.action === "open-modal";

              return (
                <LinkButton
                  href={isVideo ? "#" : link.url}
                  target={isVideo ? "_self" : "_blank"}
                  data-modal-trigger={isVideo}
                  data-video-url={isVideo ? link.url : null}
                >
                  {Icon && <Icon class="sm:size-5" />}
                  {link.name}
                </LinkButton>
              );
            })}
          </footer>
        </div>
      </article>
    ))
  }
</div>

<VideoModal />

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const modal = document.getElementById("video-modal") as HTMLDialogElement;
    const iframe = modal.querySelector("iframe") as HTMLIFrameElement;
    const closeModalButton = document.getElementById("close-modal");

    document.querySelectorAll("[data-modal-trigger='true']").forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        const videoUrl = button.getAttribute("data-video-url");
        if (videoUrl && iframe) {
          // Convert to embed URL
          const videoId = new URL(videoUrl).searchParams.get("v");
          iframe.src = `https://www.youtube.com/embed/${videoId}`;
          modal.showModal();
        }
      });
    });

    const closeModal = () => {
      modal.classList.add("closing");
      modal.addEventListener('animationend', () => {
        modal.classList.remove("closing");
        modal.close();
        iframe.src = ""; // Stop video playback
      }, { once: true });
    };

    closeModalButton?.addEventListener("click", closeModal);

    modal.addEventListener("click", (event) => {
      if (event.target === modal) {
        closeModal();
      }
    });
  });
</script>